{
    "docs": [
        {
            "location": "/", 
            "text": "BioStructures.jl\n\n\n \n \n \n\n\n\n\nDescription\n\n\nBioStructures provides functionality to read, write and manipulate macromolecular structures, in particular proteins. \nProtein Data Bank\n (PDB) format files can be read in to a heirarchical data structure. Basic spatial calculations and functions to access the PDB are also provided.\n\n\n\n\nInstallation\n\n\nInstall BioStructures from the Julia REPL:\n\n\njulia\n \nPkg\n.\nclone\n(\nhttps://github.com/BioJulia/BioStructures.jl\n)\n\n\n\n\n\n\nIf you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Home"
        }, 
        {
            "location": "/#biostructuresjl", 
            "text": "", 
            "title": "BioStructures.jl"
        }, 
        {
            "location": "/#description", 
            "text": "BioStructures provides functionality to read, write and manipulate macromolecular structures, in particular proteins.  Protein Data Bank  (PDB) format files can be read in to a heirarchical data structure. Basic spatial calculations and functions to access the PDB are also provided.", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "Install BioStructures from the Julia REPL:  julia   Pkg . clone ( https://github.com/BioJulia/BioStructures.jl )   If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Installation"
        }, 
        {
            "location": "/documentation/", 
            "text": "BioStructures documentation\n\n\nThe BioStructures.jl package provides functionality to manipulate macromolecular structures, and in particular to read and write \nProtein Data Bank\n (PDB) files. It is designed to be used for standard structural analysis tasks, as well as acting as a platform on which others can build to create more specific tools. It compares favourably in terms of performance to other PDB parsers - see some \nbenchmarks\n.\n\n\n\n\nBasics\n\n\nTo download a PDB file:\n\n\n# Stored in the current working directory by default\n\n\ndownloadpdb\n(\n1EN2\n)\n\n\n\n\n\n\nTo parse a PDB file into a Structure-Model-Chain-Residue-Atom framework:\n\n\njulia\n \nstruc\n \n=\n \nread\n(\n/path/to/pdb/file.pdb\n,\n \nPDB\n)\n\n\nBioStructures\n.\nProteinStructure\n\n\nName\n                        \n-\n  \n1\nEN2\n.\npdb\n\n\nNumber\n \nof\n \nmodels\n            \n-\n  \n1\n\n\nChain\n(\ns\n)\n                    \n-\n  \nA\n\n\nNumber\n \nof\n \nresidues\n          \n-\n  \n85\n\n\nNumber\n \nof\n \npoint\n \nmutations\n   \n-\n  \n5\n\n\nNumber\n \nof\n \nother\n \nmolecules\n   \n-\n  \n5\n\n\nNumber\n \nof\n \nwater\n \nmolecules\n   \n-\n  \n76\n\n\nNumber\n \nof\n \natoms\n             \n-\n  \n614\n\n\nNumber\n \nof\n \nhydrogens\n         \n-\n  \n0\n\n\nNumber\n \nof\n \ndisordered\n \natoms\n  \n-\n  \n27\n\n\n\n\n\n\nNote\n : Refer to \nDownloading PDB files\n and \nReading PDB files\n sections for more options.\n\n\nThe elements of \nstruc\n can be accessed as follows:\n\n\n\n\n\n\n\n\nCommand\n\n\nReturns\n\n\nReturn type\n\n\n\n\n\n\n\n\n\n\nstruc[1]\n\n\nModel 1\n\n\nModel\n\n\n\n\n\n\nstruc[1]['A']\n\n\nModel 1, chain A\n\n\nChain\n\n\n\n\n\n\nstruc['A']\n\n\nThe lowest model (model 1), chain A\n\n\nChain\n\n\n\n\n\n\nstruc['A'][\"50\"]\n\n\nModel 1, chain A, residue 50\n\n\nAbstractResidue\n\n\n\n\n\n\nstruc['A'][50]\n\n\nShortcut to above if it is not a hetero residue and the insertion code is blank\n\n\nAbstractResidue\n\n\n\n\n\n\nstruc['A'][\"H_90\"]\n\n\nModel 1, chain A, hetero residue 90\n\n\nAbstractResidue\n\n\n\n\n\n\nstruc['A'][50][\"CA\"]\n\n\nModel 1, chain A, residue 50, atom name CA\n\n\nAbstractAtom\n\n\n\n\n\n\nstruc['A'][15][\"CG\"]['A']\n\n\nFor disordered atoms, access a specific location\n\n\nAtom\n\n\n\n\n\n\n\n\nDisordered atoms are stored in a \nDisorderedAtom\n container but calls fall back to the default atom, so disorder can be ignored if you are not interested in it.\n\n\nDisordered residues (i.e. point mutations with different residue names) are stored in a \nDisorderedResidue\n container.\n\n\nThe idea is that disorder will only bother you if you want it to. See the \nBiopython discussion\n for more.\n\n\nProperties can be retrieved as follows:\n\n\n\n\n\n\n\n\nFunction\n\n\nReturns\n\n\nReturn type\n\n\n\n\n\n\n\n\n\n\nserial\n\n\nSerial number of an atom\n\n\nInt\n\n\n\n\n\n\natomname\n\n\nName of an atom\n\n\nString\n\n\n\n\n\n\naltlocid\n\n\nAlternative location ID of an atom\n\n\nChar\n\n\n\n\n\n\nx\n\n\nx coordinate of an atom\n\n\nFloat64\n\n\n\n\n\n\ny\n\n\ny coordinate of an atom\n\n\nFloat64\n\n\n\n\n\n\nz\n\n\nz coordinate of an atom\n\n\nFloat64\n\n\n\n\n\n\ncoords\n\n\ncoordinates of an atom\n\n\nArray{Float64,1}\n\n\n\n\n\n\noccupancy\n\n\nOccupancy of an atom (default is \n1.0\n)\n\n\nFloat64\n\n\n\n\n\n\ntempfactor\n\n\nTemperature factor of an atom (default is \n0.0\n)\n\n\nFloat64\n\n\n\n\n\n\nelement\n\n\nElement of an atom (default is \n\"  \"\n)\n\n\nString\n\n\n\n\n\n\ncharge\n\n\nCharge of an atom (default is \n\"  \"\n)\n\n\nString\n\n\n\n\n\n\nresidue\n\n\nResidue an atom belongs to\n\n\nResidue\n\n\n\n\n\n\nishetero\n\n\ntrue\n if the residue or atom is a hetero residue/atom\n\n\nBool\n\n\n\n\n\n\nisdisorderedatom\n\n\ntrue\n if the atom is disordered\n\n\nBool\n\n\n\n\n\n\npdbline\n\n\nPDB ATOM/HETATM record for an atom\n\n\nString\n\n\n\n\n\n\nresname\n\n\nResidue name of a residue or atom\n\n\nString\n\n\n\n\n\n\nresnumber\n\n\nResidue number of a residue or atom\n\n\nInt\n\n\n\n\n\n\ninscode\n\n\nInsertion code of a residue or atom\n\n\nChar\n\n\n\n\n\n\nresid\n\n\nResidue ID of an atom or residue (\nfull=true\n includes chain)\n\n\nString\n\n\n\n\n\n\natomnames\n\n\nAtom names of the atoms in a residue, sorted by serial\n\n\nArray{String,1}\n\n\n\n\n\n\natoms\n\n\nDictionary of atoms in a residue\n\n\nDict{String, AbstractAtom}\n\n\n\n\n\n\nisdisorderedres\n\n\ntrue\n if the residue has multiple residue names\n\n\nBool\n\n\n\n\n\n\ndisorderedres\n\n\nAccess a particular residue name in a \nDisorderedResidue\n\n\nResidue\n\n\n\n\n\n\nchain\n\n\nChain a residue or atom belongs to\n\n\nChain\n\n\n\n\n\n\nchainid\n\n\nChain ID of a chain, residue or atom\n\n\nChar\n\n\n\n\n\n\nresids\n\n\nSorted residue IDs in a chain\n\n\nArray{String,1}\n\n\n\n\n\n\nresidues\n\n\nDictionary of residues in a chain\n\n\nDict{String, AbstractResidue}\n\n\n\n\n\n\nmodel\n\n\nModel a chain, residue or atom belongs to\n\n\nModel\n\n\n\n\n\n\nmodelnumber\n\n\nModel number of a model, chain, residue or atom\n\n\nInt\n\n\n\n\n\n\nchainids\n\n\nSorted chain IDs in a model or structure\n\n\nArray{Char,1}\n\n\n\n\n\n\nchains\n\n\nDictionary of chains in a model or structure\n\n\nDict{Char, Chain}\n\n\n\n\n\n\nstructure\n\n\nStructure a model, chain, residue or atom belongs to\n\n\nProteinStructure\n\n\n\n\n\n\nstructurename\n\n\nName of the structure an element belongs to\n\n\nString\n\n\n\n\n\n\nmodelnumbers\n\n\nSorted model numbers in a structure\n\n\nArray{Int,1}\n\n\n\n\n\n\nmodels\n\n\nDictionary of models in a structure\n\n\nDict{Int, Model}\n\n\n\n\n\n\n\n\nThe \nstrip\n keyword argument determines whether surrounding whitespace is stripped for \natomname\n, \nelement\n, \ncharge\n, \nresname\n and \natomnames\n (default \ntrue\n).\n\n\nThe coordinates of an atom can be set using \nx!\n, \ny!\n, \nz!\n and \ncoords!\n.\n\n\n\n\nManipulating structures\n\n\nElements can be looped over to reveal the sub-elements in the correct order:\n\n\nfor\n \nmod\n \nin\n \nstruc\n\n    \nfor\n \nch\n \nin\n \nmod\n\n        \nfor\n \nres\n \nin\n \nch\n\n            \nfor\n \nat\n \nin\n \nres\n\n                \n# Do something\n\n            \nend\n\n        \nend\n\n    \nend\n\n\nend\n\n\n\n\n\n\nModels are ordered numerically; chains are ordered by character, except the empty chain is last; residues are ordered by residue number and insertion code with hetero residues after standard residues; atoms are ordered by atom serial.\n\n\ncollect\n can be used to get arrays of sub-elements. \ncollectatoms\n, \ncollectresidues\n, \ncollectchains\n and \ncollectmodels\n return arrays of a particular type from a structural element or element array.\n\n\nSelectors are functions passed as additional arguments to these functions. Only elements that return \ntrue\n when passed to the selector are retained. For example:\n\n\n\n\n\n\n\n\nCommand\n\n\nAction\n\n\nReturn type\n\n\n\n\n\n\n\n\n\n\ncollect(struc['A'][50])\n\n\nCollect the sub-elements of an element, e.g. atoms from a residue\n\n\nArray{AbstractAtom,1}\n\n\n\n\n\n\ncollectresidues(struc)\n\n\nCollect the residues of an element\n\n\nArray{AbstractResidue,1}\n\n\n\n\n\n\ncollectatoms(struc)\n\n\nCollect the atoms of an element\n\n\nArray{AbstractAtom,1}\n\n\n\n\n\n\ncollectatoms(struc, calphaselector)\n\n\nCollect the C-alpha atoms of an element\n\n\nArray{AbstractAtom,1}\n\n\n\n\n\n\ncollectatoms(struc, calphaselector, disorderselector)\n\n\nCollect the disordered C-alpha atoms of an element\n\n\nArray{AbstractAtom,1}\n\n\n\n\n\n\n\n\nThe selectors available are:\n\n\n\n\n\n\n\n\nFunction\n\n\nActs on\n\n\nSelects for\n\n\n\n\n\n\n\n\n\n\nstandardselector\n\n\nAbstractAtom\n or \nAbstractResidue\n\n\nAtoms/residues arising from standard (ATOM) records\n\n\n\n\n\n\nheteroselector\n\n\nAbstractAtom\n or \nAbstractResidue\n\n\nAtoms/residues arising from hetero (HETATM) records\n\n\n\n\n\n\natomnameselector\n\n\nAbstractAtom\n\n\nAtoms with atom name in a given list\n\n\n\n\n\n\ncalphaselector\n\n\nAbstractAtom\n\n\nC-alpha atoms\n\n\n\n\n\n\ncbetaselector\n\n\nAbstractAtom\n\n\nC-beta atoms, or C-alpha atoms for glycine residues\n\n\n\n\n\n\nbackboneselector\n\n\nAbstractAtom\n\n\nAtoms in the protein backbone (CA, N and C)\n\n\n\n\n\n\nheavyatomselector\n\n\nAbstractAtom\n\n\nNon-hydrogen atoms\n\n\n\n\n\n\nhydrogenselector\n\n\nAbstractAtom\n\n\nHydrogen atoms\n\n\n\n\n\n\nresnameselector\n\n\nAbstractAtom\n or \nAbstractResidue\n\n\nAtoms/residues with residue name in a given list\n\n\n\n\n\n\nwaterselector\n\n\nAbstractAtom\n or \nAbstractResidue\n\n\nAtoms/residues with residue name HOH\n\n\n\n\n\n\nnotwaterselector\n\n\nAbstractAtom\n or \nAbstractResidue\n\n\nAtoms/residues with residue name not HOH\n\n\n\n\n\n\ndisorderselector\n\n\nAbstractAtom\n or \nAbstractResidue\n\n\nAtoms/residues with alternative locations\n\n\n\n\n\n\n\n\nIt is easy to define your own atom, residue, chain or model selectors. The below will collect all atoms with x coordinate less than 0:\n\n\nxselector\n(\nat\n::\nAbstractAtom\n)\n \n=\n \nx\n(\nat\n)\n \n \n0\n\n\ncollectatoms\n(\nstruc\n,\n \nxselector\n)\n\n\n\n\n\n\nAlternatively, you can use an anonymous function:\n\n\ncollectatoms\n(\nstruc\n,\n \nat\n \n-\n \nx\n(\nat\n)\n \n \n0\n)\n\n\n\n\n\n\ncountatoms\n, \ncountresidues\n, \ncountchains\n and \ncountmodels\n can be used to count elements. For example:\n\n\njulia\n \ncountatoms\n(\nstruc\n)\n\n\n754\n\n\n\njulia\n \ncountatoms\n(\nstruc\n,\n \ncalphaselector\n)\n\n\n85\n\n\n\njulia\n \ncountresidues\n(\nstruc\n,\n \nstandardselector\n)\n\n\n85\n\n\n\n\n\n\nThe sequence of a protein can be retrieved by passing a \nChain\n or array of residues to \nAminoAcidSequence\n:\n\n\njulia\n \nAminoAcidSequence\n(\nstruc\n[\nA\n],\n \nstandardselector\n)\n\n\n85\naa\n \nAmino\n \nAcid\n \nSequence\n:\n\n\nRCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENKCWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYRC\n\n\n\n\n\n\n\n\nSpatial calculations\n\n\nVarious functions are provided to calculate spatial quantities for proteins:\n\n\n\n\n\n\n\n\nCommand\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\ndistance\n\n\nMinimum distance between two elements\n\n\n\n\n\n\nsqdistance\n\n\nMinimum square distance between two elements\n\n\n\n\n\n\nbondangle\n\n\nAngle between three atoms\n\n\n\n\n\n\ndihedralangle\n\n\nDihedral angle defined by four atoms\n\n\n\n\n\n\nomegaangle\n\n\nOmega angle between a residue and the previous residue\n\n\n\n\n\n\nphiangle\n\n\nPhi angle between a residue and the previous residue\n\n\n\n\n\n\npsiangle\n\n\nPsi angle between a residue and the next residue\n\n\n\n\n\n\nramachandranangles\n\n\nVector\ns of phi and psi angles of an element\n\n\n\n\n\n\ncontactmap\n\n\nContact map of two elements, or one element with itself\n\n\n\n\n\n\nrmsd\n\n\nRMSD between two elements of the same size - assumes they are superimposed\n\n\n\n\n\n\ndisplacements\n\n\nVector\n of displacements between two elements of the same size - assumes they are superimposed\n\n\n\n\n\n\n\n\nFor example:\n\n\njulia\n \ndistance\n(\nstruc\n[\nA\n][\n10\n],\n \nstruc\n[\nA\n][\n20\n])\n\n\n10.782158874733762\n\n\n\njulia\n \nrad2deg\n(\nbondangle\n(\nstruc\n[\nA\n][\n50\n][\nN\n],\n \nstruc\n[\nA\n][\n50\n][\nCA\n],\n \nstruc\n[\nA\n][\n50\n][\nC\n]))\n\n\n110.77765846083398\n\n\n\njulia\n \nrad2deg\n(\ndihedralangle\n(\nstruc\n[\nA\n][\n50\n][\nN\n],\n \nstruc\n[\nA\n][\n50\n][\nCA\n],\n \nstruc\n[\nA\n][\n50\n][\nC\n],\n \nstruc\n[\nA\n][\n51\n][\nN\n]))\n\n\n-\n177.38288114072924\n\n\n\njulia\n \nrad2deg\n(\npsiangle\n(\nstruc\n[\nA\n][\n50\n],\n \nstruc\n[\nA\n][\n51\n]))\n\n\n-\n177.38288114072924\n\n\n\n\n\n\n\n\nDownloading PDB files\n\n\nTo download a PDB file to a specify directory:\n\n\ndownloadpdb\n(\n1EN2\n,\n \npdb_dir\n=\npath/to/pdb/directory/\n)\n\n\n\n\n\n\nTo download multiple PDB files to a specify directory:\n\n\ndownloadpdb\n([\n1EN2\n,\n1ALW\n,\n1AKE\n],\n \npdb_dir\n=\npath/to/pdb/directory/\n)\n\n\n\n\n\n\nTo download a PDB file in PDB, XML, MMCIF or MMTF format:\n\n\n# PDB file format\n\n\ndownloadpdb\n(\n1ALW\n,\n \npdb_dir\n=\npath/to/pdb/directory/\n,\n \nfile_format\n=\nPDB\n)\n\n\n# XML file format\n\n\ndownloadpdb\n(\n1ALW\n,\n \npdb_dir\n=\npath/to/pdb/directory/\n,\n \nfile_format\n=\nPDBXML\n)\n\n\n# MMCIF file format\n\n\ndownloadpdb\n(\n1ALW\n,\n \npdb_dir\n=\npath/to/pdb/directory/\n,\n \nfile_format\n=\nMMCIF\n)\n\n\n# MMTF file format\n\n\ndownloadpdb\n(\n1ALW\n,\n \npdb_dir\n=\npath/to/pdb/directory/\n,\n \nfile_format\n=\nMMTF\n)\n\n\n\n\n\n\nVarious options can be set through optional keyword arguments when downloading PDB files as follows:\n\n\n\n\n\n\n\n\nKeyword Argument\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npdb_dir::AbstractString=pwd()\n\n\nThe directory to which the PDB file is downloaded\n\n\n\n\n\n\nfile_format::Type=PDB\n\n\nThe format of the PDB file. Options are PDB, PDBXML, MMCIF or MMTF\n\n\n\n\n\n\nobsolete::Bool=false\n\n\nIf set \ntrue\n, the PDB file is downloaded into the auto-generated \"obsolete\" directory inside the specified \npdb_dir\n\n\n\n\n\n\noverwrite::Bool=false\n\n\nIf set \ntrue\n, overwrites the PDB file if exists in \npdb_dir\n; by default skips downloading the PDB file\n\n\n\n\n\n\nba_number::Integer=0\n\n\nIf set \n 0, downloads the respective biological assembly; by default downloads the PDB file\n\n\n\n\n\n\n\n\n\n\nReading PDB files\n\n\nTo parse a existing PDB file into a Structure-Model-Chain-Residue-Atom framework:\n\n\njulia\n \nstruc\n \n=\n \nread\n(\n/path/to/pdb/file.pdb\n,\n \nPDB\n)\n\n\nBioStructures\n.\nProteinStructure\n\n\nName\n                        \n-\n  \n1\nEN2\n.\npdb\n\n\nNumber\n \nof\n \nmodels\n            \n-\n  \n1\n\n\nChain\n(\ns\n)\n                    \n-\n  \nA\n\n\nNumber\n \nof\n \nresidues\n          \n-\n  \n85\n\n\nNumber\n \nof\n \npoint\n \nmutations\n   \n-\n  \n5\n\n\nNumber\n \nof\n \nother\n \nmolecules\n   \n-\n  \n5\n\n\nNumber\n \nof\n \nwater\n \nmolecules\n   \n-\n  \n76\n\n\nNumber\n \nof\n \natoms\n             \n-\n  \n614\n\n\nNumber\n \nof\n \nhydrogens\n         \n-\n  \n0\n\n\nNumber\n \nof\n \ndisordered\n \natoms\n  \n-\n  \n27\n\n\n\n\n\n\nVarious options can be set through optional keyword arguments when parsing a PDB file as follows:\n\n\n\n\n\n\n\n\nKeyword Argument\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstructure_name::AbstractString=\"$pdbid.pdb\"\n\n\nThe name of the PDB Structure read. Defaults to \"\n PDBID \n.pdb\"\n\n\n\n\n\n\nremove_disorder::Bool=false\n\n\nIf set true, then disordered atoms wont be parsed\n\n\n\n\n\n\nread_std_atoms::Bool=true\n\n\nIf set false, then standard ATOM records wont be parsed\n\n\n\n\n\n\nread_het_atoms::Bool=true\n\n\nIf set false, then HETATOM records wont be parsed\n\n\n\n\n\n\n\n\nTo parse a PDB file by specifying the PDB ID and PDB directory into a Structure-Model-Chain-Residue-Atom framework (file name must be in upper case, e.g. \"1EN2.pdb\")\n\n\nThe function \nreadpdb\n provides an uniform way to download and read PDB files. For example:\n\n\nstruc\n \n=\n \nreadpdb\n(\n1EN2\n,\n \npdb_dir\n=\n/path/to/pdb/directory\n)\n\n\n\n\n\n\nThe same keyword arguments are taken as \nread\n above, plus \npdb_dir\n and \nba_number\n.\n\n\nTo download and parse a PDB file into a Structure-Model-Chain-Residue-Atom framework in a single line:\n\n\njulia\n \nstruc\n \n=\n \nretrievepdb\n(\n1ALW\n,\n \npdb_dir\n=\npath/to/pdb/directory\n)\n\n\nINFO\n:\n \nDownloading\n \nPDB\n \n:\n \n1\nALW\n\n\nINFO\n:\n \nParsing\n \nthe\n \nPDB\n \nfile\n...\n\n\nBioStructures\n.\nProteinStructure\n\n\nName\n                        \n-\n  \n1\nALW\n.\npdb\n\n\nNumber\n \nof\n \nmodels\n            \n-\n  \n1\n\n\nChain\n(\ns\n)\n                    \n-\n  \nAB\n\n\nNumber\n \nof\n \nresidues\n          \n-\n  \n346\n\n\nNumber\n \nof\n \npoint\n \nmutations\n   \n-\n  \n0\n\n\nNumber\n \nof\n \nother\n \nmolecules\n   \n-\n  \n10\n\n\nNumber\n \nof\n \nwater\n \nmolecules\n   \n-\n  \n104\n\n\nNumber\n \nof\n \natoms\n             \n-\n  \n2790\n\n\nNumber\n \nof\n \nhydrogens\n         \n-\n  \n0\n\n\nNumber\n \nof\n \ndisordered\n \natoms\n  \n-\n  \n0\n\n\n\n\n\n\nVarious options can be set through optional keyword arguments when downloading and parsing a PDB file as follows:\n\n\n\n\n\n\n\n\nKeyword Argument\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npdb_dir::AbstractString=pwd()\n\n\nThe directory from which the PDB file is read\n\n\n\n\n\n\nobsolete::Bool=false\n\n\nIf set \ntrue\n, PDB file is downloaded into the auto-generated \"obsolete\" directory inside the specified \npdb_dir\n\n\n\n\n\n\noverwrite::Bool=false\n\n\nif set \ntrue\n, overwrites the PDB file if exists in \npdb_dir\n; by default skips downloading PDB file if exists\n\n\n\n\n\n\nba_number::Integer=0\n\n\nIf set \n 0 reads the respective biological assembly; by default reads PDB file\n\n\n\n\n\n\nstructure_name::AbstractString=\"$pdbid.pdb\"\n\n\nThe name of the PDB Structure read. Defaults to \"\n PDBID \n.pdb\"\n\n\n\n\n\n\nremove_disorder::Bool=false\n\n\nIf set true, then disordered atoms wont be parsed\n\n\n\n\n\n\nread_std_atoms::Bool=true\n\n\nIf set false, then standard ATOM records wont be parsed\n\n\n\n\n\n\nread_het_atoms::Bool=true\n\n\nIf set false, then HETATOM records wont be parsed\n\n\n\n\n\n\n\n\n\n\nWriting PDB files\n\n\nPDB format files can be written:\n\n\nwritepdb\n(\n1EN2_out.pdb\n,\n \nstruc\n)\n\n\n\n\n\n\nAny element type can be given as input to \nwritepdb\n. Atom selectors can also be given as additional arguments:\n\n\nwritepdb\n(\n1EN2_out.pdb\n,\n \nstruc\n,\n \nbackboneselector\n)\n\n\n\n\n\n\n\n\nRCSB PDB Utility Functions\n\n\nTo download the entire RCSB PDB database in your preferred file format:\n\n\ndownloadentirepdb\n(\npdb_dir\n=\npath/to/pdb/directory/\n,\n \nfile_format\n=\nMMTF\n,\n \noverwrite\n=\nfalse\n)\n\n\n\n\n\n\nThe keyword arguments are described below:\n\n\n\n\n\n\n\n\nKeyword Argument\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npdb_dir::AbstractString=pwd()\n\n\nThe directory to which the PDB files are downloaded\n\n\n\n\n\n\nfile_format::Type=PDB\n\n\nThe format of the PDB file. Options are PDB, PDBXML, MMCIF or MMTF\n\n\n\n\n\n\noverwrite::Bool=false\n\n\nIf set \ntrue\n, overwrites the PDB file if exists in \npdb_dir\n; by default skips downloading the PDB file\n\n\n\n\n\n\n\n\nTo update your local PDB directory based on the weekly status list of new, modified and obsolete PDB files from RCSB Server:\n\n\nupdatelocalpdb\n(\npdb_dir\n=\npath/to/pdb/directory/\n,\n \nfile_format\n=\nMMTF\n)\n\n\n\n\n\n\nThe \nfile_format\n specifies the format of the PDB files present in the local PDB directory. Obsolete PDB files are stored in the autogenerated \nobsolete\n directory inside the specified local PDB directory.\n\n\nTo download all obsolete PDB files from RCSB Server:\n\n\ndownloadallobsoletepdb\n(;\nobsolete_dir\n=\n/path/to/obsolete/directory/\n,\n \nfile_format\n=\nMMCIF\n,\n \noverwrite\n=\nfalse\n)\n\n\n\n\n\n\nThe \nfile_format\n specfies the format in which the PDB files are downloaded; Options are PDB, PDBXML, MMCIF or MMTF.\n\n\nIf \noverwrite=true\n, the existing PDB files in obsolete directory will be overwritten by the newly downloaded ones.\n\n\nTo maintain a local copy of the entire RCSB PDB Database\n\n\nRun the \ndownloadentirepdb\n function once to download all PDB files and setup a CRON job or similar to run \nupdatelocalpdb\n function once in every week to keep the local PDB directory up to date with the RCSB Server.\n\n\nThere are a few more functions that may help.\n\n\n\n\n\n\n\n\nFunction\n\n\nReturns\n\n\nReturn type\n\n\n\n\n\n\n\n\n\n\npdbentrylist\n\n\nList of all PDB entries from RCSB Server\n\n\nArray{String,1}\n\n\n\n\n\n\npdbstatuslist\n\n\nList of PDB entries from specified RCSB weekly status list URL\n\n\nArray{String,1}\n\n\n\n\n\n\npdbrecentchanges\n\n\nAdded, modified and obsolete PDB lists from the recent RCSB weekly status files\n\n\nTuple{Array{String,1},Array{String,1},Array{String,1}}\n\n\n\n\n\n\npdbobsoletelist\n\n\nList of all obsolete PDB entries in the RCSB server\n\n\nArray{String,1}\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nA few further examples of BioStructures usage are given below.\n\n\nA)\n To plot the temperature factors of a protein, if you have Gadfly installed:\n\n\nusing\n \nGadfly\n\n\ncalphas\n \n=\n \ncollectatoms\n(\nstruc\n,\n \ncalphaselector\n)\n\n\nplot\n(\nx\n=\nresnumber\n.\n(\ncalphas\n),\n\n     \ny\n=\ntempfactor\n.\n(\ncalphas\n),\n\n     \nGuide\n.\nxlabel\n(\nResidue number\n),\n\n     \nGuide\n.\nylabel\n(\nTemperature factor\n),\n\n     \nGeom\n.\nline\n)\n\n\n\n\n\n\nB)\n To print the PDB records for all C-alpha atoms within 5 Angstroms of residue 38:\n\n\nfor\n \nat\n \nin\n \ncalphas\n\n    \nif\n \ndistance\n(\nstruc\n[\nA\n][\n38\n],\n \nat\n)\n \n \n5.0\n \n \nresnumber\n(\nat\n)\n \n!=\n \n38\n\n        \nprintln\n(\npdbline\n(\nat\n))\n\n    \nend\n\n\nend\n\n\n\n\n\n\nD)\n To view the contact map of a structure:\n\n\ncbetas\n \n=\n \ncollectatoms\n(\nstruc\n,\n \ncbetaselector\n)\n\n\ncontacts\n \n=\n \ncontactmap\n(\ncbetas\n,\n \n7.0\n)\n\n\nfor\n \ni\n \nin\n \n1\n:\nlength\n(\ncbetas\n)\n\n    \nfor\n \nj\n \nin\n \n1\n:\nlength\n(\ncbetas\n)\n\n        \nif\n \ncontacts\n[\ni\n,\nj\n]\n\n            \nprint\n(\n\u2588\n)\n\n        \nelse\n\n            \nprint\n(\n \n)\n\n        \nend\n\n    \nend\n\n    \nprintln\n()\n\n\nend\n\n\n\n\n\n\ncontactmap\n can also be given two structural elements as arguments, in which case a non-symmetrical 2D array is returned showing contacts between the elements.\n\n\nE)\n To show the Ramachandran phi/psi angle plot of a structure, if you have Gadfly installed:\n\n\nusing\n \nGadfly\n\n\nphi_angles\n,\n \npsi_angles\n \n=\n \nramachandranangles\n(\nstruc\n,\n \nstandardselector\n)\n\n\nplot\n(\nx\n=\nrad2deg\n.\n(\nphi_angles\n),\n\n     \ny\n=\nrad2deg\n.\n(\npsi_angles\n),\n\n     \nGuide\n.\nxlabel\n(\nPhi / degrees\n),\n\n     \nGuide\n.\nylabel\n(\nPsi / degrees\n),\n\n     \nGuide\n.\nxticks\n(\nticks\n=\n[\n-\n180\n,\n-\n90\n,\n0\n,\n90\n,\n180\n]),\n\n     \nGuide\n.\nyticks\n(\nticks\n=\n[\n-\n180\n,\n-\n90\n,\n0\n,\n90\n,\n180\n]))\n\n\n\n\n\n\nF)\n To calculate the RMSD and displacements between the heavy (non-hydrogen) atoms of two models in an NMR structure:\n\n\ndownloadpdb\n(\n1SSU\n)\n\n\nstruc_nmr\n \n=\n \nread\n(\n1SSU.pdb\n,\n \nPDB\n)\n\n\nrmsd\n(\nstruc_nmr\n[\n5\n],\n \nstruc_nmr\n[\n10\n],\n \nheavyatomselector\n)\n\n\ndisplacements\n(\nstruc_nmr\n[\n5\n],\n \nstruc_nmr\n[\n10\n],\n \nheavyatomselector\n)", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#biostructures-documentation", 
            "text": "The BioStructures.jl package provides functionality to manipulate macromolecular structures, and in particular to read and write  Protein Data Bank  (PDB) files. It is designed to be used for standard structural analysis tasks, as well as acting as a platform on which others can build to create more specific tools. It compares favourably in terms of performance to other PDB parsers - see some  benchmarks .", 
            "title": "BioStructures documentation"
        }, 
        {
            "location": "/documentation/#basics", 
            "text": "To download a PDB file:  # Stored in the current working directory by default  downloadpdb ( 1EN2 )   To parse a PDB file into a Structure-Model-Chain-Residue-Atom framework:  julia   struc   =   read ( /path/to/pdb/file.pdb ,   PDB )  BioStructures . ProteinStructure  Name                          -    1 EN2 . pdb  Number   of   models              -    1  Chain ( s )                      -    A  Number   of   residues            -    85  Number   of   point   mutations     -    5  Number   of   other   molecules     -    5  Number   of   water   molecules     -    76  Number   of   atoms               -    614  Number   of   hydrogens           -    0  Number   of   disordered   atoms    -    27   Note  : Refer to  Downloading PDB files  and  Reading PDB files  sections for more options.  The elements of  struc  can be accessed as follows:     Command  Returns  Return type      struc[1]  Model 1  Model    struc[1]['A']  Model 1, chain A  Chain    struc['A']  The lowest model (model 1), chain A  Chain    struc['A'][\"50\"]  Model 1, chain A, residue 50  AbstractResidue    struc['A'][50]  Shortcut to above if it is not a hetero residue and the insertion code is blank  AbstractResidue    struc['A'][\"H_90\"]  Model 1, chain A, hetero residue 90  AbstractResidue    struc['A'][50][\"CA\"]  Model 1, chain A, residue 50, atom name CA  AbstractAtom    struc['A'][15][\"CG\"]['A']  For disordered atoms, access a specific location  Atom     Disordered atoms are stored in a  DisorderedAtom  container but calls fall back to the default atom, so disorder can be ignored if you are not interested in it.  Disordered residues (i.e. point mutations with different residue names) are stored in a  DisorderedResidue  container.  The idea is that disorder will only bother you if you want it to. See the  Biopython discussion  for more.  Properties can be retrieved as follows:     Function  Returns  Return type      serial  Serial number of an atom  Int    atomname  Name of an atom  String    altlocid  Alternative location ID of an atom  Char    x  x coordinate of an atom  Float64    y  y coordinate of an atom  Float64    z  z coordinate of an atom  Float64    coords  coordinates of an atom  Array{Float64,1}    occupancy  Occupancy of an atom (default is  1.0 )  Float64    tempfactor  Temperature factor of an atom (default is  0.0 )  Float64    element  Element of an atom (default is  \"  \" )  String    charge  Charge of an atom (default is  \"  \" )  String    residue  Residue an atom belongs to  Residue    ishetero  true  if the residue or atom is a hetero residue/atom  Bool    isdisorderedatom  true  if the atom is disordered  Bool    pdbline  PDB ATOM/HETATM record for an atom  String    resname  Residue name of a residue or atom  String    resnumber  Residue number of a residue or atom  Int    inscode  Insertion code of a residue or atom  Char    resid  Residue ID of an atom or residue ( full=true  includes chain)  String    atomnames  Atom names of the atoms in a residue, sorted by serial  Array{String,1}    atoms  Dictionary of atoms in a residue  Dict{String, AbstractAtom}    isdisorderedres  true  if the residue has multiple residue names  Bool    disorderedres  Access a particular residue name in a  DisorderedResidue  Residue    chain  Chain a residue or atom belongs to  Chain    chainid  Chain ID of a chain, residue or atom  Char    resids  Sorted residue IDs in a chain  Array{String,1}    residues  Dictionary of residues in a chain  Dict{String, AbstractResidue}    model  Model a chain, residue or atom belongs to  Model    modelnumber  Model number of a model, chain, residue or atom  Int    chainids  Sorted chain IDs in a model or structure  Array{Char,1}    chains  Dictionary of chains in a model or structure  Dict{Char, Chain}    structure  Structure a model, chain, residue or atom belongs to  ProteinStructure    structurename  Name of the structure an element belongs to  String    modelnumbers  Sorted model numbers in a structure  Array{Int,1}    models  Dictionary of models in a structure  Dict{Int, Model}     The  strip  keyword argument determines whether surrounding whitespace is stripped for  atomname ,  element ,  charge ,  resname  and  atomnames  (default  true ).  The coordinates of an atom can be set using  x! ,  y! ,  z!  and  coords! .", 
            "title": "Basics"
        }, 
        {
            "location": "/documentation/#manipulating-structures", 
            "text": "Elements can be looped over to reveal the sub-elements in the correct order:  for   mod   in   struc \n     for   ch   in   mod \n         for   res   in   ch \n             for   at   in   res \n                 # Do something \n             end \n         end \n     end  end   Models are ordered numerically; chains are ordered by character, except the empty chain is last; residues are ordered by residue number and insertion code with hetero residues after standard residues; atoms are ordered by atom serial.  collect  can be used to get arrays of sub-elements.  collectatoms ,  collectresidues ,  collectchains  and  collectmodels  return arrays of a particular type from a structural element or element array.  Selectors are functions passed as additional arguments to these functions. Only elements that return  true  when passed to the selector are retained. For example:     Command  Action  Return type      collect(struc['A'][50])  Collect the sub-elements of an element, e.g. atoms from a residue  Array{AbstractAtom,1}    collectresidues(struc)  Collect the residues of an element  Array{AbstractResidue,1}    collectatoms(struc)  Collect the atoms of an element  Array{AbstractAtom,1}    collectatoms(struc, calphaselector)  Collect the C-alpha atoms of an element  Array{AbstractAtom,1}    collectatoms(struc, calphaselector, disorderselector)  Collect the disordered C-alpha atoms of an element  Array{AbstractAtom,1}     The selectors available are:     Function  Acts on  Selects for      standardselector  AbstractAtom  or  AbstractResidue  Atoms/residues arising from standard (ATOM) records    heteroselector  AbstractAtom  or  AbstractResidue  Atoms/residues arising from hetero (HETATM) records    atomnameselector  AbstractAtom  Atoms with atom name in a given list    calphaselector  AbstractAtom  C-alpha atoms    cbetaselector  AbstractAtom  C-beta atoms, or C-alpha atoms for glycine residues    backboneselector  AbstractAtom  Atoms in the protein backbone (CA, N and C)    heavyatomselector  AbstractAtom  Non-hydrogen atoms    hydrogenselector  AbstractAtom  Hydrogen atoms    resnameselector  AbstractAtom  or  AbstractResidue  Atoms/residues with residue name in a given list    waterselector  AbstractAtom  or  AbstractResidue  Atoms/residues with residue name HOH    notwaterselector  AbstractAtom  or  AbstractResidue  Atoms/residues with residue name not HOH    disorderselector  AbstractAtom  or  AbstractResidue  Atoms/residues with alternative locations     It is easy to define your own atom, residue, chain or model selectors. The below will collect all atoms with x coordinate less than 0:  xselector ( at :: AbstractAtom )   =   x ( at )     0  collectatoms ( struc ,   xselector )   Alternatively, you can use an anonymous function:  collectatoms ( struc ,   at   -   x ( at )     0 )   countatoms ,  countresidues ,  countchains  and  countmodels  can be used to count elements. For example:  julia   countatoms ( struc )  754  julia   countatoms ( struc ,   calphaselector )  85  julia   countresidues ( struc ,   standardselector )  85   The sequence of a protein can be retrieved by passing a  Chain  or array of residues to  AminoAcidSequence :  julia   AminoAcidSequence ( struc [ A ],   standardselector )  85 aa   Amino   Acid   Sequence :  RCGSQGGGSTCPGLRCCSIWGWCGDSEPYCGRTCENKCWSGERSDHRCGAAVGNPPCGQDRCCSVHGWCGGGNDYCSGGNCQYRC", 
            "title": "Manipulating structures"
        }, 
        {
            "location": "/documentation/#spatial-calculations", 
            "text": "Various functions are provided to calculate spatial quantities for proteins:     Command  Returns      distance  Minimum distance between two elements    sqdistance  Minimum square distance between two elements    bondangle  Angle between three atoms    dihedralangle  Dihedral angle defined by four atoms    omegaangle  Omega angle between a residue and the previous residue    phiangle  Phi angle between a residue and the previous residue    psiangle  Psi angle between a residue and the next residue    ramachandranangles  Vector s of phi and psi angles of an element    contactmap  Contact map of two elements, or one element with itself    rmsd  RMSD between two elements of the same size - assumes they are superimposed    displacements  Vector  of displacements between two elements of the same size - assumes they are superimposed     For example:  julia   distance ( struc [ A ][ 10 ],   struc [ A ][ 20 ])  10.782158874733762  julia   rad2deg ( bondangle ( struc [ A ][ 50 ][ N ],   struc [ A ][ 50 ][ CA ],   struc [ A ][ 50 ][ C ]))  110.77765846083398  julia   rad2deg ( dihedralangle ( struc [ A ][ 50 ][ N ],   struc [ A ][ 50 ][ CA ],   struc [ A ][ 50 ][ C ],   struc [ A ][ 51 ][ N ]))  - 177.38288114072924  julia   rad2deg ( psiangle ( struc [ A ][ 50 ],   struc [ A ][ 51 ]))  - 177.38288114072924", 
            "title": "Spatial calculations"
        }, 
        {
            "location": "/documentation/#downloading-pdb-files", 
            "text": "To download a PDB file to a specify directory:  downloadpdb ( 1EN2 ,   pdb_dir = path/to/pdb/directory/ )   To download multiple PDB files to a specify directory:  downloadpdb ([ 1EN2 , 1ALW , 1AKE ],   pdb_dir = path/to/pdb/directory/ )   To download a PDB file in PDB, XML, MMCIF or MMTF format:  # PDB file format  downloadpdb ( 1ALW ,   pdb_dir = path/to/pdb/directory/ ,   file_format = PDB )  # XML file format  downloadpdb ( 1ALW ,   pdb_dir = path/to/pdb/directory/ ,   file_format = PDBXML )  # MMCIF file format  downloadpdb ( 1ALW ,   pdb_dir = path/to/pdb/directory/ ,   file_format = MMCIF )  # MMTF file format  downloadpdb ( 1ALW ,   pdb_dir = path/to/pdb/directory/ ,   file_format = MMTF )   Various options can be set through optional keyword arguments when downloading PDB files as follows:     Keyword Argument  Description      pdb_dir::AbstractString=pwd()  The directory to which the PDB file is downloaded    file_format::Type=PDB  The format of the PDB file. Options are PDB, PDBXML, MMCIF or MMTF    obsolete::Bool=false  If set  true , the PDB file is downloaded into the auto-generated \"obsolete\" directory inside the specified  pdb_dir    overwrite::Bool=false  If set  true , overwrites the PDB file if exists in  pdb_dir ; by default skips downloading the PDB file    ba_number::Integer=0  If set   0, downloads the respective biological assembly; by default downloads the PDB file", 
            "title": "Downloading PDB files"
        }, 
        {
            "location": "/documentation/#reading-pdb-files", 
            "text": "To parse a existing PDB file into a Structure-Model-Chain-Residue-Atom framework:  julia   struc   =   read ( /path/to/pdb/file.pdb ,   PDB )  BioStructures . ProteinStructure  Name                          -    1 EN2 . pdb  Number   of   models              -    1  Chain ( s )                      -    A  Number   of   residues            -    85  Number   of   point   mutations     -    5  Number   of   other   molecules     -    5  Number   of   water   molecules     -    76  Number   of   atoms               -    614  Number   of   hydrogens           -    0  Number   of   disordered   atoms    -    27   Various options can be set through optional keyword arguments when parsing a PDB file as follows:     Keyword Argument  Description      structure_name::AbstractString=\"$pdbid.pdb\"  The name of the PDB Structure read. Defaults to \"  PDBID  .pdb\"    remove_disorder::Bool=false  If set true, then disordered atoms wont be parsed    read_std_atoms::Bool=true  If set false, then standard ATOM records wont be parsed    read_het_atoms::Bool=true  If set false, then HETATOM records wont be parsed     To parse a PDB file by specifying the PDB ID and PDB directory into a Structure-Model-Chain-Residue-Atom framework (file name must be in upper case, e.g. \"1EN2.pdb\")  The function  readpdb  provides an uniform way to download and read PDB files. For example:  struc   =   readpdb ( 1EN2 ,   pdb_dir = /path/to/pdb/directory )   The same keyword arguments are taken as  read  above, plus  pdb_dir  and  ba_number .  To download and parse a PDB file into a Structure-Model-Chain-Residue-Atom framework in a single line:  julia   struc   =   retrievepdb ( 1ALW ,   pdb_dir = path/to/pdb/directory )  INFO :   Downloading   PDB   :   1 ALW  INFO :   Parsing   the   PDB   file ...  BioStructures . ProteinStructure  Name                          -    1 ALW . pdb  Number   of   models              -    1  Chain ( s )                      -    AB  Number   of   residues            -    346  Number   of   point   mutations     -    0  Number   of   other   molecules     -    10  Number   of   water   molecules     -    104  Number   of   atoms               -    2790  Number   of   hydrogens           -    0  Number   of   disordered   atoms    -    0   Various options can be set through optional keyword arguments when downloading and parsing a PDB file as follows:     Keyword Argument  Description      pdb_dir::AbstractString=pwd()  The directory from which the PDB file is read    obsolete::Bool=false  If set  true , PDB file is downloaded into the auto-generated \"obsolete\" directory inside the specified  pdb_dir    overwrite::Bool=false  if set  true , overwrites the PDB file if exists in  pdb_dir ; by default skips downloading PDB file if exists    ba_number::Integer=0  If set   0 reads the respective biological assembly; by default reads PDB file    structure_name::AbstractString=\"$pdbid.pdb\"  The name of the PDB Structure read. Defaults to \"  PDBID  .pdb\"    remove_disorder::Bool=false  If set true, then disordered atoms wont be parsed    read_std_atoms::Bool=true  If set false, then standard ATOM records wont be parsed    read_het_atoms::Bool=true  If set false, then HETATOM records wont be parsed", 
            "title": "Reading PDB files"
        }, 
        {
            "location": "/documentation/#writing-pdb-files", 
            "text": "PDB format files can be written:  writepdb ( 1EN2_out.pdb ,   struc )   Any element type can be given as input to  writepdb . Atom selectors can also be given as additional arguments:  writepdb ( 1EN2_out.pdb ,   struc ,   backboneselector )", 
            "title": "Writing PDB files"
        }, 
        {
            "location": "/documentation/#rcsb-pdb-utility-functions", 
            "text": "To download the entire RCSB PDB database in your preferred file format:  downloadentirepdb ( pdb_dir = path/to/pdb/directory/ ,   file_format = MMTF ,   overwrite = false )   The keyword arguments are described below:     Keyword Argument  Description      pdb_dir::AbstractString=pwd()  The directory to which the PDB files are downloaded    file_format::Type=PDB  The format of the PDB file. Options are PDB, PDBXML, MMCIF or MMTF    overwrite::Bool=false  If set  true , overwrites the PDB file if exists in  pdb_dir ; by default skips downloading the PDB file     To update your local PDB directory based on the weekly status list of new, modified and obsolete PDB files from RCSB Server:  updatelocalpdb ( pdb_dir = path/to/pdb/directory/ ,   file_format = MMTF )   The  file_format  specifies the format of the PDB files present in the local PDB directory. Obsolete PDB files are stored in the autogenerated  obsolete  directory inside the specified local PDB directory.  To download all obsolete PDB files from RCSB Server:  downloadallobsoletepdb (; obsolete_dir = /path/to/obsolete/directory/ ,   file_format = MMCIF ,   overwrite = false )   The  file_format  specfies the format in which the PDB files are downloaded; Options are PDB, PDBXML, MMCIF or MMTF.  If  overwrite=true , the existing PDB files in obsolete directory will be overwritten by the newly downloaded ones.  To maintain a local copy of the entire RCSB PDB Database  Run the  downloadentirepdb  function once to download all PDB files and setup a CRON job or similar to run  updatelocalpdb  function once in every week to keep the local PDB directory up to date with the RCSB Server.  There are a few more functions that may help.     Function  Returns  Return type      pdbentrylist  List of all PDB entries from RCSB Server  Array{String,1}    pdbstatuslist  List of PDB entries from specified RCSB weekly status list URL  Array{String,1}    pdbrecentchanges  Added, modified and obsolete PDB lists from the recent RCSB weekly status files  Tuple{Array{String,1},Array{String,1},Array{String,1}}    pdbobsoletelist  List of all obsolete PDB entries in the RCSB server  Array{String,1}", 
            "title": "RCSB PDB Utility Functions"
        }, 
        {
            "location": "/documentation/#examples", 
            "text": "A few further examples of BioStructures usage are given below.  A)  To plot the temperature factors of a protein, if you have Gadfly installed:  using   Gadfly  calphas   =   collectatoms ( struc ,   calphaselector )  plot ( x = resnumber . ( calphas ), \n      y = tempfactor . ( calphas ), \n      Guide . xlabel ( Residue number ), \n      Guide . ylabel ( Temperature factor ), \n      Geom . line )   B)  To print the PDB records for all C-alpha atoms within 5 Angstroms of residue 38:  for   at   in   calphas \n     if   distance ( struc [ A ][ 38 ],   at )     5.0     resnumber ( at )   !=   38 \n         println ( pdbline ( at )) \n     end  end   D)  To view the contact map of a structure:  cbetas   =   collectatoms ( struc ,   cbetaselector )  contacts   =   contactmap ( cbetas ,   7.0 )  for   i   in   1 : length ( cbetas ) \n     for   j   in   1 : length ( cbetas ) \n         if   contacts [ i , j ] \n             print ( \u2588 ) \n         else \n             print (   ) \n         end \n     end \n     println ()  end   contactmap  can also be given two structural elements as arguments, in which case a non-symmetrical 2D array is returned showing contacts between the elements.  E)  To show the Ramachandran phi/psi angle plot of a structure, if you have Gadfly installed:  using   Gadfly  phi_angles ,   psi_angles   =   ramachandranangles ( struc ,   standardselector )  plot ( x = rad2deg . ( phi_angles ), \n      y = rad2deg . ( psi_angles ), \n      Guide . xlabel ( Phi / degrees ), \n      Guide . ylabel ( Psi / degrees ), \n      Guide . xticks ( ticks = [ - 180 , - 90 , 0 , 90 , 180 ]), \n      Guide . yticks ( ticks = [ - 180 , - 90 , 0 , 90 , 180 ]))   F)  To calculate the RMSD and displacements between the heavy (non-hydrogen) atoms of two models in an NMR structure:  downloadpdb ( 1SSU )  struc_nmr   =   read ( 1SSU.pdb ,   PDB )  rmsd ( struc_nmr [ 5 ],   struc_nmr [ 10 ],   heavyatomselector )  displacements ( struc_nmr [ 5 ],   struc_nmr [ 10 ],   heavyatomselector )", 
            "title": "Examples"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nWe appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.\n\n\nIf you have a question about contributing or using this package, you are encouraged to use the \nBio category of the Julia discourse site\n.\n\n\nDetailed guidance for contributing to all BioJulia packages is provided at the \nBioJulia Contribution Documentation\n.\n\n\nHere we list specific details about contributing and maintainership pertaining specifically to the BioStructures.jl package.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.  If you have a question about contributing or using this package, you are encouraged to use the  Bio category of the Julia discourse site .  Detailed guidance for contributing to all BioJulia packages is provided at the  BioJulia Contribution Documentation .  Here we list specific details about contributing and maintainership pertaining specifically to the BioStructures.jl package.", 
            "title": "Contributing"
        }
    ]
}